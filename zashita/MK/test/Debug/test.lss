
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000002e4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d89  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d1  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000557  00000000  00000000  00001afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cd  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  8e:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_pulse_enable>:
#include "LCD.h"

static void lcd_pulse_enable() {
	PORTD |= (1 << LCD_EN);
  96:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << LCD_EN);
  9a:	5d 98       	cbi	0x0b, 5	; 11
  9c:	81 e2       	ldi	r24, 0x21	; 33
  9e:	8a 95       	dec	r24
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_pulse_enable+0x8>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_send>:
	_delay_us(100);
}

static void lcd_send(uint8_t value, uint8_t mode) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (mode) PORTD |= (1 << LCD_RS);
  aa:	66 23       	and	r22, r22
  ac:	11 f0       	breq	.+4      	; 0xb2 <lcd_send+0xc>
  ae:	5f 9a       	sbi	0x0b, 7	; 11
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <lcd_send+0xe>
	else PORTD &= ~(1 << LCD_RS);
  b2:	5f 98       	cbi	0x0b, 7	; 11
	
	// Старшие 4 бита
	PORTC = (PORTC & 0x03) | ((value & 0xF0) >> 2);
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	9c 2f       	mov	r25, r28
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	96 95       	lsr	r25
  bc:	96 95       	lsr	r25
  be:	83 70       	andi	r24, 0x03	; 3
  c0:	89 2b       	or	r24, r25
  c2:	88 b9       	out	0x08, r24	; 8
	lcd_pulse_enable();
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_pulse_enable>
	
	// Младшие 4 бита
	PORTC = (PORTC & 0x03) | ((value & 0x0F) << 2);
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	cf 70       	andi	r28, 0x0F	; 15
  cc:	cc 0f       	add	r28, r28
  ce:	cc 0f       	add	r28, r28
  d0:	83 70       	andi	r24, 0x03	; 3
  d2:	c8 2b       	or	r28, r24
  d4:	c8 b9       	out	0x08, r28	; 8
	lcd_pulse_enable();
  d6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_pulse_enable>
  da:	81 e2       	ldi	r24, 0x21	; 33
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <lcd_send+0x36>
  e0:	00 00       	nop
	
	_delay_us(100);
}
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <lcd_cmd>:
	lcd_send(0x06, 0); // Auto-increment
	lcd_clear();
}

void lcd_cmd(uint8_t cmd) {
	lcd_send(cmd, 0);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
  ec:	08 95       	ret

000000ee <lcd_data>:
}

void lcd_data(uint8_t data) {
	lcd_send(data, 1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
  f4:	08 95       	ret

000000f6 <lcd_print>:
}

void lcd_print(const char *str) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	while (*str) lcd_data(*str++);
  fc:	88 81       	ld	r24, Y
  fe:	88 23       	and	r24, r24
 100:	31 f0       	breq	.+12     	; 0x10e <lcd_print+0x18>
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	0e 94 77 00 	call	0xee	; 0xee <lcd_data>
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	fb cf       	rjmp	.-10     	; 0x104 <lcd_print+0xe>
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_clear>:

void lcd_clear() {
	lcd_cmd(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_clear+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_clear+0x10>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <lcd_init>:
	_delay_us(100);
}

void lcd_init() {
	// Настройка портов
	DDRD |= (1 << LCD_RS) | (1 << LCD_EN);
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	80 6a       	ori	r24, 0xA0	; 160
 12c:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << LCD_D4) | (1 << LCD_D5) | (1 << LCD_D6) | (1 << LCD_D7);
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	8c 63       	ori	r24, 0x3C	; 60
 132:	87 b9       	out	0x07, r24	; 7
 134:	83 ed       	ldi	r24, 0xD3	; 211
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x10>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x16>
 13e:	00 00       	nop
	
	_delay_ms(50);
	
	// Инициализация 4-битного режима
	lcd_send(0x33, 0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	83 e3       	ldi	r24, 0x33	; 51
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
	lcd_send(0x32, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	82 e3       	ldi	r24, 0x32	; 50
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
	lcd_send(0x28, 0); // 4-bit, 2-line, 5x8 font
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
	lcd_send(0x0C, 0); // Display on, cursor off
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
	lcd_send(0x06, 0); // Auto-increment
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_send>
	lcd_clear();
 168:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_clear>
 16c:	08 95       	ret

0000016e <uart_init>:
#define BAUD 9600
#define LED_PIN PB5

// Инициализация UART
void uart_init() {
	UBRR0H = (F_CPU/16/BAUD-1) >> 8;
 16e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (F_CPU/16/BAUD-1);
 172:	87 e6       	ldi	r24, 0x67	; 103
 174:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 184:	08 95       	ret

00000186 <uart_send>:
}

void uart_send(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
 186:	e0 ec       	ldi	r30, 0xC0	; 192
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	90 81       	ld	r25, Z
 18c:	95 ff       	sbrs	r25, 5
 18e:	fd cf       	rjmp	.-6      	; 0x18a <uart_send+0x4>
	UDR0 = c;
 190:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 194:	08 95       	ret

00000196 <uart_print>:
}

void uart_print(const char* str) {
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	while (*str) uart_send(*str++);
 19c:	88 81       	ld	r24, Y
 19e:	88 23       	and	r24, r24
 1a0:	31 f0       	breq	.+12     	; 0x1ae <uart_print+0x18>
 1a2:	21 96       	adiw	r28, 0x01	; 1
 1a4:	0e 94 c3 00 	call	0x186	; 0x186 <uart_send>
 1a8:	89 91       	ld	r24, Y+
 1aa:	81 11       	cpse	r24, r1
 1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <uart_print+0xe>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <main>:

int main() {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	a0 97       	sbiw	r28, 0x20	; 32
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
	// Инициализация периферии
	DDRB |= (1 << LED_PIN);  // Настройка PB5 как выход
 1c8:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1 << LED_PIN); // Изначально выключен
 1ca:	2d 98       	cbi	0x05, 5	; 5
	
	uart_init();    // Инициализация UART
 1cc:	0e 94 b7 00 	call	0x16e	; 0x16e <uart_init>
	lcd_init();     // Инициализация LCD
 1d0:	0e 94 94 00 	call	0x128	; 0x128 <lcd_init>
	lcd_clear();    // Очистка дисплея
 1d4:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_clear>
	
	// Стартовое сообщение
	lcd_print("System Ready");
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_print>
	uart_print("System Ready\r\n");
 1e0:	8d e0       	ldi	r24, 0x0D	; 13
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 cb 00 	call	0x196	; 0x196 <uart_print>
	
	char buffer[32];
	uint8_t idx = 0;
 1e8:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1) {
		// Обработка входящих команд
		if (UCSR0A & (1 << RXC0)) {
 1ea:	00 ec       	ldi	r16, 0xC0	; 192
 1ec:	10 e0       	ldi	r17, 0x00	; 0
			char c = UDR0;
 1ee:	0f 2e       	mov	r0, r31
 1f0:	f6 ec       	ldi	r31, 0xC6	; 198
 1f2:	ef 2e       	mov	r14, r31
 1f4:	f1 2c       	mov	r15, r1
 1f6:	f0 2d       	mov	r31, r0
					uart_print("LCD_OK:");
					uart_print(buffer + 4);
					uart_print("\r\n");
				}
				
				idx = 0;
 1f8:	d1 2c       	mov	r13, r1
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <main+0x4a>
 1fc:	9d 2d       	mov	r25, r13
	char buffer[32];
	uint8_t idx = 0;
	
	while (1) {
		// Обработка входящих команд
		if (UCSR0A & (1 << RXC0)) {
 1fe:	f8 01       	movw	r30, r16
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	e4 f7       	brge	.-8      	; 0x1fe <main+0x4a>
			char c = UDR0;
 206:	f7 01       	movw	r30, r14
 208:	80 81       	ld	r24, Z
			
			if (c == '\r' || c == '\n') {
 20a:	8d 30       	cpi	r24, 0x0D	; 13
 20c:	19 f0       	breq	.+6      	; 0x214 <main+0x60>
 20e:	8a 30       	cpi	r24, 0x0A	; 10
 210:	09 f0       	breq	.+2      	; 0x214 <main+0x60>
 212:	43 c0       	rjmp	.+134    	; 0x29a <main+0xe6>
				buffer[idx] = '\0';
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	e9 0f       	add	r30, r25
 21e:	f1 1d       	adc	r31, r1
 220:	10 82       	st	Z, r1
				
				// Команда для светодиода
				if (strcmp(buffer, "LED_ON") == 0) {
 222:	6c e1       	ldi	r22, 0x1C	; 28
 224:	71 e0       	ldi	r23, 0x01	; 1
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <strcmp>
 22e:	89 2b       	or	r24, r25
 230:	39 f4       	brne	.+14     	; 0x240 <main+0x8c>
					PORTB |= (1 << LED_PIN);
 232:	2d 9a       	sbi	0x05, 5	; 5
					uart_print("LED:ON\r\n");
 234:	83 e2       	ldi	r24, 0x23	; 35
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 cb 00 	call	0x196	; 0x196 <uart_print>
					uart_print("LCD_OK:");
					uart_print(buffer + 4);
					uart_print("\r\n");
				}
				
				idx = 0;
 23c:	9d 2d       	mov	r25, r13
 23e:	df cf       	rjmp	.-66     	; 0x1fe <main+0x4a>
				// Команда для светодиода
				if (strcmp(buffer, "LED_ON") == 0) {
					PORTB |= (1 << LED_PIN);
					uart_print("LED:ON\r\n");
				}
				else if (strcmp(buffer, "LED_OFF") == 0) {
 240:	6c e2       	ldi	r22, 0x2C	; 44
 242:	71 e0       	ldi	r23, 0x01	; 1
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	0e 94 59 01 	call	0x2b2	; 0x2b2 <strcmp>
 24c:	89 2b       	or	r24, r25
 24e:	39 f4       	brne	.+14     	; 0x25e <main+0xaa>
					PORTB &= ~(1 << LED_PIN);
 250:	2d 98       	cbi	0x05, 5	; 5
					uart_print("LED:OFF\r\n");
 252:	84 e3       	ldi	r24, 0x34	; 52
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 cb 00 	call	0x196	; 0x196 <uart_print>
					uart_print("LCD_OK:");
					uart_print(buffer + 4);
					uart_print("\r\n");
				}
				
				idx = 0;
 25a:	9d 2d       	mov	r25, r13
 25c:	d0 cf       	rjmp	.-96     	; 0x1fe <main+0x4a>
				else if (strcmp(buffer, "LED_OFF") == 0) {
					PORTB &= ~(1 << LED_PIN);
					uart_print("LED:OFF\r\n");
				}
				// Команда для LCD
				else if (strncmp(buffer, "LCD:", 4) == 0) {
 25e:	44 e0       	ldi	r20, 0x04	; 4
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	6e e3       	ldi	r22, 0x3E	; 62
 264:	71 e0       	ldi	r23, 0x01	; 1
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <strncmp>
 26e:	89 2b       	or	r24, r25
 270:	29 f6       	brne	.-118    	; 0x1fc <main+0x48>
					lcd_clear();
 272:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_clear>
					lcd_print(buffer + 4); // Вывод текста после "LCD:"
 276:	ce 01       	movw	r24, r28
 278:	05 96       	adiw	r24, 0x05	; 5
 27a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_print>
					uart_print("LCD_OK:");
 27e:	83 e4       	ldi	r24, 0x43	; 67
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 cb 00 	call	0x196	; 0x196 <uart_print>
					uart_print(buffer + 4);
 286:	ce 01       	movw	r24, r28
 288:	05 96       	adiw	r24, 0x05	; 5
 28a:	0e 94 cb 00 	call	0x196	; 0x196 <uart_print>
					uart_print("\r\n");
 28e:	8b e3       	ldi	r24, 0x3B	; 59
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 cb 00 	call	0x196	; 0x196 <uart_print>
				}
				
				idx = 0;
 296:	9d 2d       	mov	r25, r13
 298:	b2 cf       	rjmp	.-156    	; 0x1fe <main+0x4a>
			}
			else if (idx < sizeof(buffer)-1) {
 29a:	9f 31       	cpi	r25, 0x1F	; 31
 29c:	08 f0       	brcs	.+2      	; 0x2a0 <main+0xec>
 29e:	af cf       	rjmp	.-162    	; 0x1fe <main+0x4a>
				buffer[idx++] = c;
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e9 0f       	add	r30, r25
 2aa:	f1 1d       	adc	r31, r1
 2ac:	80 83       	st	Z, r24
 2ae:	9f 5f       	subi	r25, 0xFF	; 255
 2b0:	a6 cf       	rjmp	.-180    	; 0x1fe <main+0x4a>

000002b2 <strcmp>:
 2b2:	fb 01       	movw	r30, r22
 2b4:	dc 01       	movw	r26, r24
 2b6:	8d 91       	ld	r24, X+
 2b8:	01 90       	ld	r0, Z+
 2ba:	80 19       	sub	r24, r0
 2bc:	01 10       	cpse	r0, r1
 2be:	d9 f3       	breq	.-10     	; 0x2b6 <strcmp+0x4>
 2c0:	99 0b       	sbc	r25, r25
 2c2:	08 95       	ret

000002c4 <strncmp>:
 2c4:	fb 01       	movw	r30, r22
 2c6:	dc 01       	movw	r26, r24
 2c8:	41 50       	subi	r20, 0x01	; 1
 2ca:	50 40       	sbci	r21, 0x00	; 0
 2cc:	30 f0       	brcs	.+12     	; 0x2da <strncmp+0x16>
 2ce:	8d 91       	ld	r24, X+
 2d0:	01 90       	ld	r0, Z+
 2d2:	80 19       	sub	r24, r0
 2d4:	19 f4       	brne	.+6      	; 0x2dc <strncmp+0x18>
 2d6:	00 20       	and	r0, r0
 2d8:	b9 f7       	brne	.-18     	; 0x2c8 <strncmp+0x4>
 2da:	88 1b       	sub	r24, r24
 2dc:	99 0b       	sbc	r25, r25
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
