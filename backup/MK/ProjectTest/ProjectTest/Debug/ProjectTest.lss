
ProjectTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080019c  0080019c  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e3  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075f  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000373  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e7  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 39       	cpi	r26, 0x9C	; 156
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e9       	ldi	r26, 0x9C	; 156
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3b       	cpi	r26, 0xBD	; 189
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#define CMD_BUFFER_SIZE 32
char cmdBuffer[CMD_BUFFER_SIZE];
uint8_t cmdIndex = 0;

void USART_Init() {
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  bc:	08 95       	ret

000000be <USART_SendChar>:
}

void USART_SendChar(char c) {
	while(!(UCSR0A & (1<<UDRE0)));
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <USART_SendChar+0x4>
	UDR0 = c;
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  cc:	08 95       	ret

000000ce <USART_SendString>:
}

void USART_SendString(const char* str) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	while(*str) USART_SendChar(*str++);
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	31 f0       	breq	.+12     	; 0xe6 <USART_SendString+0x18>
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_SendChar>
  e0:	89 91       	ld	r24, Y+
  e2:	81 11       	cpse	r24, r1
  e4:	fb cf       	rjmp	.-10     	; 0xdc <USART_SendString+0xe>
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <ProcessCommand>:

void ProcessCommand(const char* cmd) {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
	if(strcmp(cmd, "LED_ON") == 0) {
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	71 e0       	ldi	r23, 0x01	; 1
  f6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <strcmp>
  fa:	89 2b       	or	r24, r25
  fc:	31 f4       	brne	.+12     	; 0x10a <ProcessCommand+0x1e>
		LED_PORT |= (1<<LED_PIN);
  fe:	2d 9a       	sbi	0x05, 5	; 5
		USART_SendString("LED: ON\r\n");
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
 108:	2e c0       	rjmp	.+92     	; 0x166 <ProcessCommand+0x7a>
	}
	else if(strcmp(cmd, "LED_OFF") == 0) {
 10a:	61 e1       	ldi	r22, 0x11	; 17
 10c:	71 e0       	ldi	r23, 0x01	; 1
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <strcmp>
 114:	89 2b       	or	r24, r25
 116:	31 f4       	brne	.+12     	; 0x124 <ProcessCommand+0x38>
		LED_PORT &= ~(1<<LED_PIN);
 118:	2d 98       	cbi	0x05, 5	; 5
		USART_SendString("LED: OFF\r\n");
 11a:	89 e1       	ldi	r24, 0x19	; 25
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
 122:	21 c0       	rjmp	.+66     	; 0x166 <ProcessCommand+0x7a>
	}
	
	
	else if(strncmp(cmd, "TEXT:", 5) == 0) {
 124:	45 e0       	ldi	r20, 0x05	; 5
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	64 e2       	ldi	r22, 0x24	; 36
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <strncmp>
 132:	89 2b       	or	r24, r25
 134:	69 f4       	brne	.+26     	; 0x150 <ProcessCommand+0x64>
		USART_SendString("DISPLAY: ");
 136:	8a e2       	ldi	r24, 0x2A	; 42
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
		USART_SendString(cmd+5);
 13e:	ce 01       	movw	r24, r28
 140:	05 96       	adiw	r24, 0x05	; 5
 142:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
		USART_SendString("\r\n");
 146:	8e e4       	ldi	r24, 0x4E	; 78
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
 14e:	0b c0       	rjmp	.+22     	; 0x166 <ProcessCommand+0x7a>
	}
	else {
		USART_SendString("ERROR: Unknown command '");
 150:	84 e3       	ldi	r24, 0x34	; 52
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
		USART_SendString(cmd);
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
		USART_SendString("'\r\n");
 15e:	8d e4       	ldi	r24, 0x4D	; 77
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <main>:

int main(void) { 
	LED_DDR |= (1<<LED_PIN);
 16c:	25 9a       	sbi	0x04, 5	; 4
	USART_Init();
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	USART_SendString("\r\n=== SYSTEM READY ===\r\n");
 172:	81 e5       	ldi	r24, 0x51	; 81
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
	USART_SendString("Commands:\r\n");
 17a:	8a e6       	ldi	r24, 0x6A	; 106
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
	USART_SendString("LED_ON, LED_OFF, TEXT:your_message\r\n");
 182:	86 e7       	ldi	r24, 0x76	; 118
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>

	while(1) {
		// Приём команд
		if(UCSR0A & (1<<RXC0)) {
 18a:	c0 ec       	ldi	r28, 0xC0	; 192
 18c:	d0 e0       	ldi	r29, 0x00	; 0
			char c = UDR0;
 18e:	06 ec       	ldi	r16, 0xC6	; 198
 190:	10 e0       	ldi	r17, 0x00	; 0
	USART_SendString("Commands:\r\n");
	USART_SendString("LED_ON, LED_OFF, TEXT:your_message\r\n");

	while(1) {
		// Приём команд
		if(UCSR0A & (1<<RXC0)) {
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	0c f5       	brge	.+66     	; 0x1da <main+0x6e>
			char c = UDR0;
 198:	f8 01       	movw	r30, r16
 19a:	80 81       	ld	r24, Z
			
			if(c == '\r' || c == '\n') {
 19c:	8d 30       	cpi	r24, 0x0D	; 13
 19e:	11 f0       	breq	.+4      	; 0x1a4 <main+0x38>
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	79 f4       	brne	.+30     	; 0x1c2 <main+0x56>
				if(cmdIndex > 0) {
 1a4:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__data_end>
 1a8:	ee 23       	and	r30, r30
 1aa:	b9 f0       	breq	.+46     	; 0x1da <main+0x6e>
					cmdBuffer[cmdIndex] = '\0';
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	e3 56       	subi	r30, 0x63	; 99
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	10 82       	st	Z, r1
					ProcessCommand(cmdBuffer);
 1b4:	8d e9       	ldi	r24, 0x9D	; 157
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 76 00 	call	0xec	; 0xec <ProcessCommand>
					cmdIndex = 0;
 1bc:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <main+0x6e>
				}
			}
			else if(cmdIndex < CMD_BUFFER_SIZE-1) {
 1c2:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__data_end>
 1c6:	ef 31       	cpi	r30, 0x1F	; 31
 1c8:	40 f4       	brcc	.+16     	; 0x1da <main+0x6e>
				cmdBuffer[cmdIndex++] = c;
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	9e 0f       	add	r25, r30
 1ce:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <__data_end>
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e3 56       	subi	r30, 0x63	; 99
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	83 ec       	ldi	r24, 0xC3	; 195
 1dc:	99 e0       	ldi	r25, 0x09	; 9
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0x72>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x78>
 1e4:	00 00       	nop
 1e6:	d5 cf       	rjmp	.-86     	; 0x192 <main+0x26>

000001e8 <strcmp>:
 1e8:	fb 01       	movw	r30, r22
 1ea:	dc 01       	movw	r26, r24
 1ec:	8d 91       	ld	r24, X+
 1ee:	01 90       	ld	r0, Z+
 1f0:	80 19       	sub	r24, r0
 1f2:	01 10       	cpse	r0, r1
 1f4:	d9 f3       	breq	.-10     	; 0x1ec <strcmp+0x4>
 1f6:	99 0b       	sbc	r25, r25
 1f8:	08 95       	ret

000001fa <strncmp>:
 1fa:	fb 01       	movw	r30, r22
 1fc:	dc 01       	movw	r26, r24
 1fe:	41 50       	subi	r20, 0x01	; 1
 200:	50 40       	sbci	r21, 0x00	; 0
 202:	30 f0       	brcs	.+12     	; 0x210 <strncmp+0x16>
 204:	8d 91       	ld	r24, X+
 206:	01 90       	ld	r0, Z+
 208:	80 19       	sub	r24, r0
 20a:	19 f4       	brne	.+6      	; 0x212 <strncmp+0x18>
 20c:	00 20       	and	r0, r0
 20e:	b9 f7       	brne	.-18     	; 0x1fe <strncmp+0x4>
 210:	88 1b       	sub	r24, r24
 212:	99 0b       	sbc	r25, r25
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
